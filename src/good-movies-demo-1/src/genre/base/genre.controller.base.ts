/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GenreService } from "../genre.service";
import { GenreCreateInput } from "./GenreCreateInput";
import { Genre } from "./Genre";
import { GenreFindManyArgs } from "./GenreFindManyArgs";
import { GenreWhereUniqueInput } from "./GenreWhereUniqueInput";
import { GenreUpdateInput } from "./GenreUpdateInput";

export class GenreControllerBase {
  constructor(protected readonly service: GenreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Genre })
  @swagger.ApiBody({
    type: GenreCreateInput,
  })
  async createGenre(@common.Body() data: GenreCreateInput): Promise<Genre> {
    return await this.service.createGenre({
      data: {
        ...data,

        movie: data.movie
          ? {
              connect: data.movie,
            }
          : undefined,

        series: data.series
          ? {
              connect: data.series,
            }
          : undefined,

        videoContent: data.videoContent
          ? {
              connect: data.videoContent,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        decription: true,
        id: true,

        movie: {
          select: {
            id: true,
          },
        },

        Name: true,

        series: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        videoContent: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Genre] })
  @ApiNestedQuery(GenreFindManyArgs)
  async genres(@common.Req() request: Request): Promise<Genre[]> {
    const args = plainToClass(GenreFindManyArgs, request.query);
    return this.service.genres({
      ...args,
      select: {
        createdAt: true,
        decription: true,
        id: true,

        movie: {
          select: {
            id: true,
          },
        },

        Name: true,

        series: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        videoContent: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Genre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async genre(
    @common.Param() params: GenreWhereUniqueInput
  ): Promise<Genre | null> {
    const result = await this.service.genre({
      where: params,
      select: {
        createdAt: true,
        decription: true,
        id: true,

        movie: {
          select: {
            id: true,
          },
        },

        Name: true,

        series: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        videoContent: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Genre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: GenreUpdateInput,
  })
  async updateGenre(
    @common.Param() params: GenreWhereUniqueInput,
    @common.Body() data: GenreUpdateInput
  ): Promise<Genre | null> {
    try {
      return await this.service.updateGenre({
        where: params,
        data: {
          ...data,

          movie: data.movie
            ? {
                connect: data.movie,
              }
            : undefined,

          series: data.series
            ? {
                connect: data.series,
              }
            : undefined,

          videoContent: data.videoContent
            ? {
                connect: data.videoContent,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          decription: true,
          id: true,

          movie: {
            select: {
              id: true,
            },
          },

          Name: true,

          series: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          videoContent: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Genre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGenre(
    @common.Param() params: GenreWhereUniqueInput
  ): Promise<Genre | null> {
    try {
      return await this.service.deleteGenre({
        where: params,
        select: {
          createdAt: true,
          decription: true,
          id: true,

          movie: {
            select: {
              id: true,
            },
          },

          Name: true,

          series: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          videoContent: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
