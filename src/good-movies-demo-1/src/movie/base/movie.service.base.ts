/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Movie, // @ts-ignore
  Genre,
} from "@prisma/client";

export class MovieServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MovieCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MovieCountArgs>
  ): Promise<number> {
    return this.prisma.movie.count(args);
  }

  async movies<T extends Prisma.MovieFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MovieFindManyArgs>
  ): Promise<Movie[]> {
    return this.prisma.movie.findMany(args);
  }
  async movie<T extends Prisma.MovieFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MovieFindUniqueArgs>
  ): Promise<Movie | null> {
    return this.prisma.movie.findUnique(args);
  }
  async createMovie<T extends Prisma.MovieCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MovieCreateArgs>
  ): Promise<Movie> {
    return this.prisma.movie.create<T>(args);
  }
  async updateMovie<T extends Prisma.MovieUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MovieUpdateArgs>
  ): Promise<Movie> {
    return this.prisma.movie.update<T>(args);
  }
  async deleteMovie<T extends Prisma.MovieDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MovieDeleteArgs>
  ): Promise<Movie> {
    return this.prisma.movie.delete(args);
  }

  async findGenre(
    parentId: string,
    args: Prisma.GenreFindManyArgs
  ): Promise<Genre[]> {
    return this.prisma.movie
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .genre(args);
  }
}
