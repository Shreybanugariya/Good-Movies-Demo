/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @swagger.ApiBody({
    type: UserCreateInput,
  })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: {
        ...data,

        movies: data.movies
          ? {
              connect: data.movies,
            }
          : undefined,

        userMovieMapping: data.userMovieMapping
          ? {
              connect: data.userMovieMapping,
            }
          : undefined,

        userMovieMappings: data.userMovieMappings
          ? {
              connect: data.userMovieMappings,
            }
          : undefined,

        userSeriesMapping: data.userSeriesMapping
          ? {
              connect: data.userSeriesMapping,
            }
          : undefined,

        webseries: data.webseries
          ? {
              connect: data.webseries,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        email: true,
        id: true,
        link: true,

        movies: {
          select: {
            id: true,
          },
        },

        roles: true,
        updatedAt: true,

        userMovieMapping: {
          select: {
            id: true,
          },
        },

        userMovieMappings: {
          select: {
            id: true,
          },
        },

        username: true,
        UserName: true,

        userSeriesMapping: {
          select: {
            id: true,
          },
        },

        webseries: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        link: true,

        movies: {
          select: {
            id: true,
          },
        },

        roles: true,
        updatedAt: true,

        userMovieMapping: {
          select: {
            id: true,
          },
        },

        userMovieMappings: {
          select: {
            id: true,
          },
        },

        username: true,
        UserName: true,

        userSeriesMapping: {
          select: {
            id: true,
          },
        },

        webseries: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        link: true,

        movies: {
          select: {
            id: true,
          },
        },

        roles: true,
        updatedAt: true,

        userMovieMapping: {
          select: {
            id: true,
          },
        },

        userMovieMappings: {
          select: {
            id: true,
          },
        },

        username: true,
        UserName: true,

        userSeriesMapping: {
          select: {
            id: true,
          },
        },

        webseries: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: UserUpdateInput,
  })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: {
          ...data,

          movies: data.movies
            ? {
                connect: data.movies,
              }
            : undefined,

          userMovieMapping: data.userMovieMapping
            ? {
                connect: data.userMovieMapping,
              }
            : undefined,

          userMovieMappings: data.userMovieMappings
            ? {
                connect: data.userMovieMappings,
              }
            : undefined,

          userSeriesMapping: data.userSeriesMapping
            ? {
                connect: data.userSeriesMapping,
              }
            : undefined,

          webseries: data.webseries
            ? {
                connect: data.webseries,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          email: true,
          id: true,
          link: true,

          movies: {
            select: {
              id: true,
            },
          },

          roles: true,
          updatedAt: true,

          userMovieMapping: {
            select: {
              id: true,
            },
          },

          userMovieMappings: {
            select: {
              id: true,
            },
          },

          username: true,
          UserName: true,

          userSeriesMapping: {
            select: {
              id: true,
            },
          },

          webseries: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          link: true,

          movies: {
            select: {
              id: true,
            },
          },

          roles: true,
          updatedAt: true,

          userMovieMapping: {
            select: {
              id: true,
            },
          },

          userMovieMappings: {
            select: {
              id: true,
            },
          },

          username: true,
          UserName: true,

          userSeriesMapping: {
            select: {
              id: true,
            },
          },

          webseries: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
