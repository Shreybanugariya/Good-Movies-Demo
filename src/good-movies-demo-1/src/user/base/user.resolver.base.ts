/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { User } from "./User";
import { UserCountArgs } from "./UserCountArgs";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserFindUniqueArgs } from "./UserFindUniqueArgs";
import { CreateUserArgs } from "./CreateUserArgs";
import { UpdateUserArgs } from "./UpdateUserArgs";
import { DeleteUserArgs } from "./DeleteUserArgs";
import { Movie } from "../../movie/base/Movie";
import { UserMovieMapping } from "../../userMovieMapping/base/UserMovieMapping";
import { UserSeriesMapping } from "../../userSeriesMapping/base/UserSeriesMapping";
import { Series } from "../../series/base/Series";
import { UserService } from "../user.service";
@graphql.Resolver(() => User)
export class UserResolverBase {
  constructor(protected readonly service: UserService) {}

  async _usersMeta(
    @graphql.Args() args: UserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [User])
  async users(@graphql.Args() args: UserFindManyArgs): Promise<User[]> {
    return this.service.users(args);
  }

  @graphql.Query(() => User, { nullable: true })
  async user(@graphql.Args() args: UserFindUniqueArgs): Promise<User | null> {
    const result = await this.service.user(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => User)
  async createUser(@graphql.Args() args: CreateUserArgs): Promise<User> {
    return await this.service.createUser({
      ...args,
      data: {
        ...args.data,

        movies: args.data.movies
          ? {
              connect: args.data.movies,
            }
          : undefined,

        userMovieMapping: args.data.userMovieMapping
          ? {
              connect: args.data.userMovieMapping,
            }
          : undefined,

        userMovieMappings: args.data.userMovieMappings
          ? {
              connect: args.data.userMovieMappings,
            }
          : undefined,

        userSeriesMapping: args.data.userSeriesMapping
          ? {
              connect: args.data.userSeriesMapping,
            }
          : undefined,

        webseries: args.data.webseries
          ? {
              connect: args.data.webseries,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => User)
  async updateUser(@graphql.Args() args: UpdateUserArgs): Promise<User | null> {
    try {
      return await this.service.updateUser({
        ...args,
        data: {
          ...args.data,

          movies: args.data.movies
            ? {
                connect: args.data.movies,
              }
            : undefined,

          userMovieMapping: args.data.userMovieMapping
            ? {
                connect: args.data.userMovieMapping,
              }
            : undefined,

          userMovieMappings: args.data.userMovieMappings
            ? {
                connect: args.data.userMovieMappings,
              }
            : undefined,

          userSeriesMapping: args.data.userSeriesMapping
            ? {
                connect: args.data.userSeriesMapping,
              }
            : undefined,

          webseries: args.data.webseries
            ? {
                connect: args.data.webseries,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => User)
  async deleteUser(@graphql.Args() args: DeleteUserArgs): Promise<User | null> {
    try {
      return await this.service.deleteUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Movie, {
    nullable: true,
    name: "movies",
  })
  async getMovies(@graphql.Parent() parent: User): Promise<Movie | null> {
    const result = await this.service.getMovies(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserMovieMapping, {
    nullable: true,
    name: "userMovieMapping",
  })
  async getUserMovieMapping(
    @graphql.Parent() parent: User
  ): Promise<UserMovieMapping | null> {
    const result = await this.service.getUserMovieMapping(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserMovieMapping, {
    nullable: true,
    name: "userMovieMappings",
  })
  async getUserMovieMappings(
    @graphql.Parent() parent: User
  ): Promise<UserMovieMapping | null> {
    const result = await this.service.getUserMovieMappings(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserSeriesMapping, {
    nullable: true,
    name: "userSeriesMapping",
  })
  async getUserSeriesMapping(
    @graphql.Parent() parent: User
  ): Promise<UserSeriesMapping | null> {
    const result = await this.service.getUserSeriesMapping(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Series, {
    nullable: true,
    name: "webseries",
  })
  async getWebseries(@graphql.Parent() parent: User): Promise<Series | null> {
    const result = await this.service.getWebseries(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
