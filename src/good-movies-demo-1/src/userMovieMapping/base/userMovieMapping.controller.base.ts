/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserMovieMappingService } from "../userMovieMapping.service";
import { UserMovieMappingCreateInput } from "./UserMovieMappingCreateInput";
import { UserMovieMapping } from "./UserMovieMapping";
import { UserMovieMappingFindManyArgs } from "./UserMovieMappingFindManyArgs";
import { UserMovieMappingWhereUniqueInput } from "./UserMovieMappingWhereUniqueInput";
import { UserMovieMappingUpdateInput } from "./UserMovieMappingUpdateInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

export class UserMovieMappingControllerBase {
  constructor(protected readonly service: UserMovieMappingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserMovieMapping })
  @swagger.ApiBody({
    type: UserMovieMappingCreateInput,
  })
  async createUserMovieMapping(
    @common.Body() data: UserMovieMappingCreateInput
  ): Promise<UserMovieMapping> {
    return await this.service.createUserMovieMapping({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserMovieMapping] })
  @ApiNestedQuery(UserMovieMappingFindManyArgs)
  async userMovieMappings(
    @common.Req() request: Request
  ): Promise<UserMovieMapping[]> {
    const args = plainToClass(UserMovieMappingFindManyArgs, request.query);
    return this.service.userMovieMappings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserMovieMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userMovieMapping(
    @common.Param() params: UserMovieMappingWhereUniqueInput
  ): Promise<UserMovieMapping | null> {
    const result = await this.service.userMovieMapping({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserMovieMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: UserMovieMappingUpdateInput,
  })
  async updateUserMovieMapping(
    @common.Param() params: UserMovieMappingWhereUniqueInput,
    @common.Body() data: UserMovieMappingUpdateInput
  ): Promise<UserMovieMapping | null> {
    try {
      return await this.service.updateUserMovieMapping({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserMovieMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserMovieMapping(
    @common.Param() params: UserMovieMappingWhereUniqueInput
  ): Promise<UserMovieMapping | null> {
    try {
      return await this.service.deleteUserMovieMapping({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/movieId")
  @ApiNestedQuery(UserFindManyArgs)
  async findMovieId(
    @common.Req() request: Request,
    @common.Param() params: UserMovieMappingWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findMovieId(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        id: true,
        link: true,

        movies: {
          select: {
            id: true,
          },
        },

        roles: true,
        updatedAt: true,

        userMovieMapping: {
          select: {
            id: true,
          },
        },

        userMovieMappings: {
          select: {
            id: true,
          },
        },

        username: true,
        UserName: true,

        userSeriesMapping: {
          select: {
            id: true,
          },
        },

        webseries: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/movieId")
  async connectMovieId(
    @common.Param() params: UserMovieMappingWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      movieId: {
        connect: body,
      },
    };
    await this.service.updateUserMovieMapping({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/movieId")
  async updateMovieId(
    @common.Param() params: UserMovieMappingWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      movieId: {
        set: body,
      },
    };
    await this.service.updateUserMovieMapping({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/movieId")
  async disconnectMovieId(
    @common.Param() params: UserMovieMappingWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      movieId: {
        disconnect: body,
      },
    };
    await this.service.updateUserMovieMapping({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userId")
  @ApiNestedQuery(UserFindManyArgs)
  async findUserId(
    @common.Req() request: Request,
    @common.Param() params: UserMovieMappingWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUserId(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        id: true,
        link: true,

        movies: {
          select: {
            id: true,
          },
        },

        roles: true,
        updatedAt: true,

        userMovieMapping: {
          select: {
            id: true,
          },
        },

        userMovieMappings: {
          select: {
            id: true,
          },
        },

        username: true,
        UserName: true,

        userSeriesMapping: {
          select: {
            id: true,
          },
        },

        webseries: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userId")
  async connectUserId(
    @common.Param() params: UserMovieMappingWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userId: {
        connect: body,
      },
    };
    await this.service.updateUserMovieMapping({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userId")
  async updateUserId(
    @common.Param() params: UserMovieMappingWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userId: {
        set: body,
      },
    };
    await this.service.updateUserMovieMapping({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userId")
  async disconnectUserId(
    @common.Param() params: UserMovieMappingWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userId: {
        disconnect: body,
      },
    };
    await this.service.updateUserMovieMapping({
      where: params,
      data,
      select: { id: true },
    });
  }
}
