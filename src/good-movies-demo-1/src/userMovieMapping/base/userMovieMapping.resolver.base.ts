/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserMovieMapping } from "./UserMovieMapping";
import { UserMovieMappingCountArgs } from "./UserMovieMappingCountArgs";
import { UserMovieMappingFindManyArgs } from "./UserMovieMappingFindManyArgs";
import { UserMovieMappingFindUniqueArgs } from "./UserMovieMappingFindUniqueArgs";
import { CreateUserMovieMappingArgs } from "./CreateUserMovieMappingArgs";
import { UpdateUserMovieMappingArgs } from "./UpdateUserMovieMappingArgs";
import { DeleteUserMovieMappingArgs } from "./DeleteUserMovieMappingArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserMovieMappingService } from "../userMovieMapping.service";
@graphql.Resolver(() => UserMovieMapping)
export class UserMovieMappingResolverBase {
  constructor(protected readonly service: UserMovieMappingService) {}

  async _userMovieMappingsMeta(
    @graphql.Args() args: UserMovieMappingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserMovieMapping])
  async userMovieMappings(
    @graphql.Args() args: UserMovieMappingFindManyArgs
  ): Promise<UserMovieMapping[]> {
    return this.service.userMovieMappings(args);
  }

  @graphql.Query(() => UserMovieMapping, { nullable: true })
  async userMovieMapping(
    @graphql.Args() args: UserMovieMappingFindUniqueArgs
  ): Promise<UserMovieMapping | null> {
    const result = await this.service.userMovieMapping(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserMovieMapping)
  async createUserMovieMapping(
    @graphql.Args() args: CreateUserMovieMappingArgs
  ): Promise<UserMovieMapping> {
    return await this.service.createUserMovieMapping({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserMovieMapping)
  async updateUserMovieMapping(
    @graphql.Args() args: UpdateUserMovieMappingArgs
  ): Promise<UserMovieMapping | null> {
    try {
      return await this.service.updateUserMovieMapping({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserMovieMapping)
  async deleteUserMovieMapping(
    @graphql.Args() args: DeleteUserMovieMappingArgs
  ): Promise<UserMovieMapping | null> {
    try {
      return await this.service.deleteUserMovieMapping(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [User], { name: "movieId" })
  async findMovieId(
    @graphql.Parent() parent: UserMovieMapping,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findMovieId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [User], { name: "userId" })
  async findUserId(
    @graphql.Parent() parent: UserMovieMapping,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUserId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
