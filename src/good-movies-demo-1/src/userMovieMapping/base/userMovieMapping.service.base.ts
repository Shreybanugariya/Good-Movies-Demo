/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserMovieMapping, // @ts-ignore
  User,
} from "@prisma/client";

export class UserMovieMappingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserMovieMappingCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserMovieMappingCountArgs>
  ): Promise<number> {
    return this.prisma.userMovieMapping.count(args);
  }

  async userMovieMappings<T extends Prisma.UserMovieMappingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserMovieMappingFindManyArgs>
  ): Promise<UserMovieMapping[]> {
    return this.prisma.userMovieMapping.findMany(args);
  }
  async userMovieMapping<T extends Prisma.UserMovieMappingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserMovieMappingFindUniqueArgs>
  ): Promise<UserMovieMapping | null> {
    return this.prisma.userMovieMapping.findUnique(args);
  }
  async createUserMovieMapping<T extends Prisma.UserMovieMappingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserMovieMappingCreateArgs>
  ): Promise<UserMovieMapping> {
    return this.prisma.userMovieMapping.create<T>(args);
  }
  async updateUserMovieMapping<T extends Prisma.UserMovieMappingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserMovieMappingUpdateArgs>
  ): Promise<UserMovieMapping> {
    return this.prisma.userMovieMapping.update<T>(args);
  }
  async deleteUserMovieMapping<T extends Prisma.UserMovieMappingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserMovieMappingDeleteArgs>
  ): Promise<UserMovieMapping> {
    return this.prisma.userMovieMapping.delete(args);
  }

  async findMovieId(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.userMovieMapping
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .movieId(args);
  }

  async findUserId(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.userMovieMapping
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userId(args);
  }
}
