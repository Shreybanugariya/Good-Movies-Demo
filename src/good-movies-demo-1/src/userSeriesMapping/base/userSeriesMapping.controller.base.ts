/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserSeriesMappingService } from "../userSeriesMapping.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserSeriesMappingCreateInput } from "./UserSeriesMappingCreateInput";
import { UserSeriesMapping } from "./UserSeriesMapping";
import { UserSeriesMappingFindManyArgs } from "./UserSeriesMappingFindManyArgs";
import { UserSeriesMappingWhereUniqueInput } from "./UserSeriesMappingWhereUniqueInput";
import { UserSeriesMappingUpdateInput } from "./UserSeriesMappingUpdateInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { SeriesFindManyArgs } from "../../series/base/SeriesFindManyArgs";
import { Series } from "../../series/base/Series";
import { SeriesWhereUniqueInput } from "../../series/base/SeriesWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserSeriesMappingControllerBase {
  constructor(
    protected readonly service: UserSeriesMappingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserSeriesMapping })
  @nestAccessControl.UseRoles({
    resource: "UserSeriesMapping",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUserSeriesMapping(
    @common.Body() data: UserSeriesMappingCreateInput
  ): Promise<UserSeriesMapping> {
    return await this.service.createUserSeriesMapping({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [UserSeriesMapping] })
  @ApiNestedQuery(UserSeriesMappingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserSeriesMapping",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userSeriesMappings(
    @common.Req() request: Request
  ): Promise<UserSeriesMapping[]> {
    const args = plainToClass(UserSeriesMappingFindManyArgs, request.query);
    return this.service.userSeriesMappings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserSeriesMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserSeriesMapping",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userSeriesMapping(
    @common.Param() params: UserSeriesMappingWhereUniqueInput
  ): Promise<UserSeriesMapping | null> {
    const result = await this.service.userSeriesMapping({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserSeriesMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserSeriesMapping",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUserSeriesMapping(
    @common.Param() params: UserSeriesMappingWhereUniqueInput,
    @common.Body() data: UserSeriesMappingUpdateInput
  ): Promise<UserSeriesMapping | null> {
    try {
      return await this.service.updateUserSeriesMapping({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserSeriesMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserSeriesMapping",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUserSeriesMapping(
    @common.Param() params: UserSeriesMappingWhereUniqueInput
  ): Promise<UserSeriesMapping | null> {
    try {
      return await this.service.deleteUserSeriesMapping({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userId")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUserId(
    @common.Req() request: Request,
    @common.Param() params: UserSeriesMappingWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUserId(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        id: true,
        link: true,

        movies: {
          select: {
            id: true,
          },
        },

        roles: true,
        updatedAt: true,

        userMovieMapping: {
          select: {
            id: true,
          },
        },

        userMovieMappings: {
          select: {
            id: true,
          },
        },

        username: true,
        UserName: true,

        userSeriesMapping: {
          select: {
            id: true,
          },
        },

        webseries: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userId")
  @nestAccessControl.UseRoles({
    resource: "UserSeriesMapping",
    action: "update",
    possession: "any",
  })
  async connectUserId(
    @common.Param() params: UserSeriesMappingWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userId: {
        connect: body,
      },
    };
    await this.service.updateUserSeriesMapping({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userId")
  @nestAccessControl.UseRoles({
    resource: "UserSeriesMapping",
    action: "update",
    possession: "any",
  })
  async updateUserId(
    @common.Param() params: UserSeriesMappingWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userId: {
        set: body,
      },
    };
    await this.service.updateUserSeriesMapping({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userId")
  @nestAccessControl.UseRoles({
    resource: "UserSeriesMapping",
    action: "update",
    possession: "any",
  })
  async disconnectUserId(
    @common.Param() params: UserSeriesMappingWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userId: {
        disconnect: body,
      },
    };
    await this.service.updateUserSeriesMapping({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/webSeriesId")
  @ApiNestedQuery(SeriesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Series",
    action: "read",
    possession: "any",
  })
  async findWebSeriesId(
    @common.Req() request: Request,
    @common.Param() params: UserSeriesMappingWhereUniqueInput
  ): Promise<Series[]> {
    const query = plainToClass(SeriesFindManyArgs, request.query);
    const results = await this.service.findWebSeriesId(params.id, {
      ...query,
      select: {
        createdAt: true,
        descption: true,

        director: {
          select: {
            id: true,
          },
        },

        id: true,
        mustWatchCount: true,
        name: true,
        rating: true,
        updatedAt: true,

        userSeriesMapping: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/webSeriesId")
  @nestAccessControl.UseRoles({
    resource: "UserSeriesMapping",
    action: "update",
    possession: "any",
  })
  async connectWebSeriesId(
    @common.Param() params: UserSeriesMappingWhereUniqueInput,
    @common.Body() body: SeriesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webSeriesId: {
        connect: body,
      },
    };
    await this.service.updateUserSeriesMapping({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/webSeriesId")
  @nestAccessControl.UseRoles({
    resource: "UserSeriesMapping",
    action: "update",
    possession: "any",
  })
  async updateWebSeriesId(
    @common.Param() params: UserSeriesMappingWhereUniqueInput,
    @common.Body() body: SeriesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webSeriesId: {
        set: body,
      },
    };
    await this.service.updateUserSeriesMapping({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/webSeriesId")
  @nestAccessControl.UseRoles({
    resource: "UserSeriesMapping",
    action: "update",
    possession: "any",
  })
  async disconnectWebSeriesId(
    @common.Param() params: UserSeriesMappingWhereUniqueInput,
    @common.Body() body: SeriesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webSeriesId: {
        disconnect: body,
      },
    };
    await this.service.updateUserSeriesMapping({
      where: params,
      data,
      select: { id: true },
    });
  }
}
