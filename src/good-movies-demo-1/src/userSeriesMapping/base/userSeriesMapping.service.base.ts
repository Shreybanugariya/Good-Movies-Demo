/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserSeriesMapping, // @ts-ignore
  User, // @ts-ignore
  Series,
} from "@prisma/client";

export class UserSeriesMappingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserSeriesMappingCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSeriesMappingCountArgs>
  ): Promise<number> {
    return this.prisma.userSeriesMapping.count(args);
  }

  async userSeriesMappings<T extends Prisma.UserSeriesMappingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSeriesMappingFindManyArgs>
  ): Promise<UserSeriesMapping[]> {
    return this.prisma.userSeriesMapping.findMany(args);
  }
  async userSeriesMapping<T extends Prisma.UserSeriesMappingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSeriesMappingFindUniqueArgs>
  ): Promise<UserSeriesMapping | null> {
    return this.prisma.userSeriesMapping.findUnique(args);
  }
  async createUserSeriesMapping<T extends Prisma.UserSeriesMappingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSeriesMappingCreateArgs>
  ): Promise<UserSeriesMapping> {
    return this.prisma.userSeriesMapping.create<T>(args);
  }
  async updateUserSeriesMapping<T extends Prisma.UserSeriesMappingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSeriesMappingUpdateArgs>
  ): Promise<UserSeriesMapping> {
    return this.prisma.userSeriesMapping.update<T>(args);
  }
  async deleteUserSeriesMapping<T extends Prisma.UserSeriesMappingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSeriesMappingDeleteArgs>
  ): Promise<UserSeriesMapping> {
    return this.prisma.userSeriesMapping.delete(args);
  }

  async findUserId(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.userSeriesMapping
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userId(args);
  }

  async findWebSeriesId(
    parentId: string,
    args: Prisma.SeriesFindManyArgs
  ): Promise<Series[]> {
    return this.prisma.userSeriesMapping
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .webSeriesId(args);
  }
}
