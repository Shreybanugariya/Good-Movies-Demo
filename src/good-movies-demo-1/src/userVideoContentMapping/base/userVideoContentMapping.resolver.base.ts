/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserVideoContentMapping } from "./UserVideoContentMapping";
import { UserVideoContentMappingCountArgs } from "./UserVideoContentMappingCountArgs";
import { UserVideoContentMappingFindManyArgs } from "./UserVideoContentMappingFindManyArgs";
import { UserVideoContentMappingFindUniqueArgs } from "./UserVideoContentMappingFindUniqueArgs";
import { CreateUserVideoContentMappingArgs } from "./CreateUserVideoContentMappingArgs";
import { UpdateUserVideoContentMappingArgs } from "./UpdateUserVideoContentMappingArgs";
import { DeleteUserVideoContentMappingArgs } from "./DeleteUserVideoContentMappingArgs";
import { VideoContentFindManyArgs } from "../../videoContent/base/VideoContentFindManyArgs";
import { VideoContent } from "../../videoContent/base/VideoContent";
import { UserVideoContentMappingService } from "../userVideoContentMapping.service";
@graphql.Resolver(() => UserVideoContentMapping)
export class UserVideoContentMappingResolverBase {
  constructor(protected readonly service: UserVideoContentMappingService) {}

  async _userVideoContentMappingsMeta(
    @graphql.Args() args: UserVideoContentMappingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserVideoContentMapping])
  async userVideoContentMappings(
    @graphql.Args() args: UserVideoContentMappingFindManyArgs
  ): Promise<UserVideoContentMapping[]> {
    return this.service.userVideoContentMappings(args);
  }

  @graphql.Query(() => UserVideoContentMapping, { nullable: true })
  async userVideoContentMapping(
    @graphql.Args() args: UserVideoContentMappingFindUniqueArgs
  ): Promise<UserVideoContentMapping | null> {
    const result = await this.service.userVideoContentMapping(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserVideoContentMapping)
  async createUserVideoContentMapping(
    @graphql.Args() args: CreateUserVideoContentMappingArgs
  ): Promise<UserVideoContentMapping> {
    return await this.service.createUserVideoContentMapping({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserVideoContentMapping)
  async updateUserVideoContentMapping(
    @graphql.Args() args: UpdateUserVideoContentMappingArgs
  ): Promise<UserVideoContentMapping | null> {
    try {
      return await this.service.updateUserVideoContentMapping({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserVideoContentMapping)
  async deleteUserVideoContentMapping(
    @graphql.Args() args: DeleteUserVideoContentMappingArgs
  ): Promise<UserVideoContentMapping | null> {
    try {
      return await this.service.deleteUserVideoContentMapping(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [VideoContent], { name: "userId" })
  async findUserId(
    @graphql.Parent() parent: UserVideoContentMapping,
    @graphql.Args() args: VideoContentFindManyArgs
  ): Promise<VideoContent[]> {
    const results = await this.service.findUserId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [VideoContent], { name: "videoContentId" })
  async findVideoContentId(
    @graphql.Parent() parent: UserVideoContentMapping,
    @graphql.Args() args: VideoContentFindManyArgs
  ): Promise<VideoContent[]> {
    const results = await this.service.findVideoContentId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
