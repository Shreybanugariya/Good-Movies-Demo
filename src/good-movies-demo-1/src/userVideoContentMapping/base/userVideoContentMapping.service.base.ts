/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserVideoContentMapping, // @ts-ignore
  VideoContent,
} from "@prisma/client";

export class UserVideoContentMappingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserVideoContentMappingCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserVideoContentMappingCountArgs>
  ): Promise<number> {
    return this.prisma.userVideoContentMapping.count(args);
  }

  async userVideoContentMappings<
    T extends Prisma.UserVideoContentMappingFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.UserVideoContentMappingFindManyArgs>
  ): Promise<UserVideoContentMapping[]> {
    return this.prisma.userVideoContentMapping.findMany(args);
  }
  async userVideoContentMapping<
    T extends Prisma.UserVideoContentMappingFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.UserVideoContentMappingFindUniqueArgs>
  ): Promise<UserVideoContentMapping | null> {
    return this.prisma.userVideoContentMapping.findUnique(args);
  }
  async createUserVideoContentMapping<
    T extends Prisma.UserVideoContentMappingCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.UserVideoContentMappingCreateArgs>
  ): Promise<UserVideoContentMapping> {
    return this.prisma.userVideoContentMapping.create<T>(args);
  }
  async updateUserVideoContentMapping<
    T extends Prisma.UserVideoContentMappingUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.UserVideoContentMappingUpdateArgs>
  ): Promise<UserVideoContentMapping> {
    return this.prisma.userVideoContentMapping.update<T>(args);
  }
  async deleteUserVideoContentMapping<
    T extends Prisma.UserVideoContentMappingDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.UserVideoContentMappingDeleteArgs>
  ): Promise<UserVideoContentMapping> {
    return this.prisma.userVideoContentMapping.delete(args);
  }

  async findUserId(
    parentId: string,
    args: Prisma.VideoContentFindManyArgs
  ): Promise<VideoContent[]> {
    return this.prisma.userVideoContentMapping
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userId(args);
  }

  async findVideoContentId(
    parentId: string,
    args: Prisma.VideoContentFindManyArgs
  ): Promise<VideoContent[]> {
    return this.prisma.userVideoContentMapping
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .videoContentId(args);
  }
}
