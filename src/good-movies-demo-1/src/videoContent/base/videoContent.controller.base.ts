/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VideoContentService } from "../videoContent.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VideoContentCreateInput } from "./VideoContentCreateInput";
import { VideoContent } from "./VideoContent";
import { VideoContentFindManyArgs } from "./VideoContentFindManyArgs";
import { VideoContentWhereUniqueInput } from "./VideoContentWhereUniqueInput";
import { VideoContentUpdateInput } from "./VideoContentUpdateInput";
import { GenreFindManyArgs } from "../../genre/base/GenreFindManyArgs";
import { Genre } from "../../genre/base/Genre";
import { GenreWhereUniqueInput } from "../../genre/base/GenreWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VideoContentControllerBase {
  constructor(
    protected readonly service: VideoContentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VideoContent })
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVideoContent(
    @common.Body() data: VideoContentCreateInput
  ): Promise<VideoContent> {
    return await this.service.createVideoContent({
      data: {
        ...data,

        userVideoContentMapping: data.userVideoContentMapping
          ? {
              connect: data.userVideoContentMapping,
            }
          : undefined,

        videoContentMapping: data.videoContentMapping
          ? {
              connect: data.videoContentMapping,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        mustWatchCount: true,
        name: true,
        rating: true,
        updatedAt: true,

        userVideoContentMapping: {
          select: {
            id: true,
          },
        },

        videoContentMapping: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [VideoContent] })
  @ApiNestedQuery(VideoContentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async videoContents(@common.Req() request: Request): Promise<VideoContent[]> {
    const args = plainToClass(VideoContentFindManyArgs, request.query);
    return this.service.videoContents({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        mustWatchCount: true,
        name: true,
        rating: true,
        updatedAt: true,

        userVideoContentMapping: {
          select: {
            id: true,
          },
        },

        videoContentMapping: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VideoContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async videoContent(
    @common.Param() params: VideoContentWhereUniqueInput
  ): Promise<VideoContent | null> {
    const result = await this.service.videoContent({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        mustWatchCount: true,
        name: true,
        rating: true,
        updatedAt: true,

        userVideoContentMapping: {
          select: {
            id: true,
          },
        },

        videoContentMapping: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VideoContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVideoContent(
    @common.Param() params: VideoContentWhereUniqueInput,
    @common.Body() data: VideoContentUpdateInput
  ): Promise<VideoContent | null> {
    try {
      return await this.service.updateVideoContent({
        where: params,
        data: {
          ...data,

          userVideoContentMapping: data.userVideoContentMapping
            ? {
                connect: data.userVideoContentMapping,
              }
            : undefined,

          videoContentMapping: data.videoContentMapping
            ? {
                connect: data.videoContentMapping,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          mustWatchCount: true,
          name: true,
          rating: true,
          updatedAt: true,

          userVideoContentMapping: {
            select: {
              id: true,
            },
          },

          videoContentMapping: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VideoContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVideoContent(
    @common.Param() params: VideoContentWhereUniqueInput
  ): Promise<VideoContent | null> {
    try {
      return await this.service.deleteVideoContent({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          mustWatchCount: true,
          name: true,
          rating: true,
          updatedAt: true,

          userVideoContentMapping: {
            select: {
              id: true,
            },
          },

          videoContentMapping: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/itemPrice")
  @ApiNestedQuery(GenreFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Genre",
    action: "read",
    possession: "any",
  })
  async findItemPrice(
    @common.Req() request: Request,
    @common.Param() params: VideoContentWhereUniqueInput
  ): Promise<Genre[]> {
    const query = plainToClass(GenreFindManyArgs, request.query);
    const results = await this.service.findItemPrice(params.id, {
      ...query,
      select: {
        createdAt: true,
        decription: true,
        id: true,

        movie: {
          select: {
            id: true,
          },
        },

        Name: true,

        series: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        videoContent: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/itemPrice")
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "update",
    possession: "any",
  })
  async connectItemPrice(
    @common.Param() params: VideoContentWhereUniqueInput,
    @common.Body() body: GenreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemPrice: {
        connect: body,
      },
    };
    await this.service.updateVideoContent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/itemPrice")
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "update",
    possession: "any",
  })
  async updateItemPrice(
    @common.Param() params: VideoContentWhereUniqueInput,
    @common.Body() body: GenreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemPrice: {
        set: body,
      },
    };
    await this.service.updateVideoContent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/itemPrice")
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "update",
    possession: "any",
  })
  async disconnectItemPrice(
    @common.Param() params: VideoContentWhereUniqueInput,
    @common.Body() body: GenreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemPrice: {
        disconnect: body,
      },
    };
    await this.service.updateVideoContent({
      where: params,
      data,
      select: { id: true },
    });
  }
}
