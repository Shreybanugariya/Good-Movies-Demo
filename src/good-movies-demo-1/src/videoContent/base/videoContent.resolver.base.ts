/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VideoContent } from "./VideoContent";
import { VideoContentCountArgs } from "./VideoContentCountArgs";
import { VideoContentFindManyArgs } from "./VideoContentFindManyArgs";
import { VideoContentFindUniqueArgs } from "./VideoContentFindUniqueArgs";
import { CreateVideoContentArgs } from "./CreateVideoContentArgs";
import { UpdateVideoContentArgs } from "./UpdateVideoContentArgs";
import { DeleteVideoContentArgs } from "./DeleteVideoContentArgs";
import { GenreFindManyArgs } from "../../genre/base/GenreFindManyArgs";
import { Genre } from "../../genre/base/Genre";
import { UserVideoContentMapping } from "../../userVideoContentMapping/base/UserVideoContentMapping";
import { VideoContentService } from "../videoContent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VideoContent)
export class VideoContentResolverBase {
  constructor(
    protected readonly service: VideoContentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "read",
    possession: "any",
  })
  async _videoContentsMeta(
    @graphql.Args() args: VideoContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VideoContent])
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "read",
    possession: "any",
  })
  async videoContents(
    @graphql.Args() args: VideoContentFindManyArgs
  ): Promise<VideoContent[]> {
    return this.service.videoContents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VideoContent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "read",
    possession: "own",
  })
  async videoContent(
    @graphql.Args() args: VideoContentFindUniqueArgs
  ): Promise<VideoContent | null> {
    const result = await this.service.videoContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VideoContent)
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "create",
    possession: "any",
  })
  async createVideoContent(
    @graphql.Args() args: CreateVideoContentArgs
  ): Promise<VideoContent> {
    return await this.service.createVideoContent({
      ...args,
      data: {
        ...args.data,

        userVideoContentMapping: args.data.userVideoContentMapping
          ? {
              connect: args.data.userVideoContentMapping,
            }
          : undefined,

        videoContentMapping: args.data.videoContentMapping
          ? {
              connect: args.data.videoContentMapping,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VideoContent)
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "update",
    possession: "any",
  })
  async updateVideoContent(
    @graphql.Args() args: UpdateVideoContentArgs
  ): Promise<VideoContent | null> {
    try {
      return await this.service.updateVideoContent({
        ...args,
        data: {
          ...args.data,

          userVideoContentMapping: args.data.userVideoContentMapping
            ? {
                connect: args.data.userVideoContentMapping,
              }
            : undefined,

          videoContentMapping: args.data.videoContentMapping
            ? {
                connect: args.data.videoContentMapping,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VideoContent)
  @nestAccessControl.UseRoles({
    resource: "VideoContent",
    action: "delete",
    possession: "any",
  })
  async deleteVideoContent(
    @graphql.Args() args: DeleteVideoContentArgs
  ): Promise<VideoContent | null> {
    try {
      return await this.service.deleteVideoContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Genre], { name: "itemPrice" })
  @nestAccessControl.UseRoles({
    resource: "Genre",
    action: "read",
    possession: "any",
  })
  async findItemPrice(
    @graphql.Parent() parent: VideoContent,
    @graphql.Args() args: GenreFindManyArgs
  ): Promise<Genre[]> {
    const results = await this.service.findItemPrice(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserVideoContentMapping, {
    nullable: true,
    name: "userVideoContentMapping",
  })
  @nestAccessControl.UseRoles({
    resource: "UserVideoContentMapping",
    action: "read",
    possession: "any",
  })
  async getUserVideoContentMapping(
    @graphql.Parent() parent: VideoContent
  ): Promise<UserVideoContentMapping | null> {
    const result = await this.service.getUserVideoContentMapping(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserVideoContentMapping, {
    nullable: true,
    name: "videoContentMapping",
  })
  @nestAccessControl.UseRoles({
    resource: "UserVideoContentMapping",
    action: "read",
    possession: "any",
  })
  async getVideoContentMapping(
    @graphql.Parent() parent: VideoContent
  ): Promise<UserVideoContentMapping | null> {
    const result = await this.service.getVideoContentMapping(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
