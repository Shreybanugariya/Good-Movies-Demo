/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VideoContent, // @ts-ignore
  Genre, // @ts-ignore
  UserVideoContentMapping,
} from "@prisma/client";

export class VideoContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.VideoContentCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoContentCountArgs>
  ): Promise<number> {
    return this.prisma.videoContent.count(args);
  }

  async videoContents<T extends Prisma.VideoContentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoContentFindManyArgs>
  ): Promise<VideoContent[]> {
    return this.prisma.videoContent.findMany(args);
  }
  async videoContent<T extends Prisma.VideoContentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoContentFindUniqueArgs>
  ): Promise<VideoContent | null> {
    return this.prisma.videoContent.findUnique(args);
  }
  async createVideoContent<T extends Prisma.VideoContentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoContentCreateArgs>
  ): Promise<VideoContent> {
    return this.prisma.videoContent.create<T>(args);
  }
  async updateVideoContent<T extends Prisma.VideoContentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoContentUpdateArgs>
  ): Promise<VideoContent> {
    return this.prisma.videoContent.update<T>(args);
  }
  async deleteVideoContent<T extends Prisma.VideoContentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoContentDeleteArgs>
  ): Promise<VideoContent> {
    return this.prisma.videoContent.delete(args);
  }

  async findItemPrice(
    parentId: string,
    args: Prisma.GenreFindManyArgs
  ): Promise<Genre[]> {
    return this.prisma.videoContent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .itemPrice(args);
  }

  async getUserVideoContentMapping(
    parentId: string
  ): Promise<UserVideoContentMapping | null> {
    return this.prisma.videoContent
      .findUnique({
        where: { id: parentId },
      })
      .userVideoContentMapping();
  }

  async getVideoContentMapping(
    parentId: string
  ): Promise<UserVideoContentMapping | null> {
    return this.prisma.videoContent
      .findUnique({
        where: { id: parentId },
      })
      .videoContentMapping();
  }
}
